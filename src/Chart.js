// chart.js
import React from 'react';
import { Card,Row,Col,Container } from 'react-bootstrap';
import 'react-vis/dist/style.css';
import dataValue from './classifier.json';
import './Chart.css';
import { connect } from 'react-redux';
import { updateDays } from './action';
import { Link } from 'react-router-dom';
import axios from 'axios';

import {
    FlexibleXYPlot,
    XAxis, //shows the values on the x axis
    YAxis, //shows the values on the y axis
    VerticalBarSeries,
    HorizontalGridLines
} from 'react-vis';

class Chart extends React.Component {

    // GET data from API
    requestData(cb) {
      axios.get('http://3.83.130.8:3000/api/malware/')
          .then(response => {
              console.log(response.data);
              cb(response.data);
          })
          .catch(function (error){
              console.log(error);
          })
    }

    //invoked immediately after a component is mounted
    componentDidMount() {
      this.requestData(data => {
        this.handleClick(data);
      });
    }

    //operation needs to happen after the DOM is updated
    componentDidUpdate(prevProps, prevState) {
      if (prevProps.days !== this.props.days){
        this.requestData(data => {
          this.handleClick(data);
        });
      }
    }

    //Graphing function
    handleClick(data) {

      console.log(data);
      //get JSON classifier data
      var dataV = dataValue;

      //initialize chart variables
      this.malMap = [];
      this.appMap = [];
      this.indMap = [];
      this.numbMap = [];

      //assuming the malware incidents are orderded from most recent
      var i;
      for (i = 0; i < this.props.days; i++) {
        var item = data[i];
        this.malMap.push({"x": item.day, "y": item.incidents});
      }

      this.malMap.reverse();
      //console.log(this.malMap);

      console.log(this.props.days);

      var dict = {}; // create an empty object

      //create dictionary to count the 30/90 occurrence of each malware_num
      for (i = 0; i < dataV.length; i++) {
        dict[dataV[i].numb] = 0;
      }

      //count frequencies
      for (i = 0; i < this.props.days; i++) {
        var item = data[i];
        var j;
        var mal_list = item.malware_list;
        for(j = 0; j< item.incidents; j++){
          dict[mal_list[j]] += 1;
        }
      }
      //console.log(dict);

      //initialize app Dictionary
      var appDict = {};
      var app_names = ["Web Browsing","SMTP","POP3","Manual Uploads","HTTP Proxy","yumpan","Google Play","FTP","Slack","Confluence"];
      for(i = 0; i<app_names.length; i++){
        console.log(app_names[i]);
        appDict[app_names[i]] = 0;
      }

      //initalize industry dictionary
      var indDict = {};
      var ind_names = ["Higher","High Tech","Professional", "Hospitality", "Manufacturing", "Media", "Government", "Healthcare", "Finance", "Wholesale"];
      for(i = 0; i<ind_names.length; i++){
        indDict[ind_names[i]] = 0;
      }

      //console.log(app_names[i]);

      //count freq of app_type and industry_type
      for (i=0; i < dataV.length; i++) {
        var mal = dataV[i];
        var freq = dict[mal.numb];
        if(dict[mal.numb]>0){
          appDict[mal.app_type] += 1*dict[mal.numb];
          indDict[mal.industry_type] += 1*dict[mal.numb];
        }
      }

      var numbSorted = Object.keys(dict).sort(function(a,b){return dict[a]-dict[b]})
      numbSorted.reverse();

      var indSorted = Object.keys(indDict).sort(function(a,b){return indDict[a]-indDict[b]})
      indSorted.reverse();

      var appSorted = Object.keys(appDict).sort(function(a,b){return appDict[a]-appDict[b]})
      appSorted.reverse();


      for (i=0; i<10; i++) {
        this.indMap.push({"x": indSorted[i] , "y": indDict[indSorted[i]]});
        this.numbMap.push({"x": numbSorted[i+1] , "y": dict[numbSorted[i+1]]});
        this.appMap.push({"x": appSorted[i] , "y": appDict[appSorted[i]]});

      }

      //console.log(this.numbMap);
      console.log("updating view");

      // should trigger after everything
      this.forceUpdate();
    }


    render() {
        return (
          <div>
            <Container>
              <Row className="mb-4">
                <Col>
                  <Card body>
                  <p className="float-left mb-0">
                    <strong>
                    Malware Download Sessions
                    </strong>
                  </p>
                    <FlexibleXYPlot
                        xType="ordinal"
                        yDomain={[0, 15]}
                        height={250}
                        margin={{top: 10, bottom: 70, left: 40, right: 0}}>
                      <XAxis
                        tickFormat = {(t, i) => {
                          if ((i+1) % 5 == 0) {
                            return t.split(',')[0];
                          }
                          else {
                            return;
                          }
                        }}
                        tickLabelAngle={-45}
                        tickTotal={10}
                        style = {{fontSize: 10}}/>
                      <HorizontalGridLines tickTotal={2}/>
                      <YAxis tickTotal={2}/>
                      <VerticalBarSeries
                        data={this.malMap}
                        color= "#154360"
                      />
                    </FlexibleXYPlot>
                  </Card>
                </Col>
              </Row>

              <Row>
                <Col>
                  <Card body>
                  <p className="float-left mb-0">
                    <strong>
                    Top Applications
                    </strong>
                  </p>
                    <FlexibleXYPlot
                        xType="ordinal"
                        yDomain={[0,50]}
                        height={250}
                        margin={{top: 10, bottom: 70, left: 40, right: 0}}>
                      <XAxis tickLabelAngle={-45} position='start' style = {{fontSize: 10}}/>
                      <YAxis tickTotal={2}/>
                      <HorizontalGridLines tickTotal={2}/>
                      <VerticalBarSeries
                        data={this.appMap}
                        color= "#154360"
                      />
                    </FlexibleXYPlot>
                  </Card>
                </Col>
                <Col>
                  <Card body>
                  <p className="float-left mb-0">
                    <strong>
                    Target Industries
                    </strong>
                  </p>
                    <FlexibleXYPlot
                        xType="ordinal"
                        yDomain={[0,50]}
                        height={250}
                        margin={{top: 10, bottom: 70, left: 40, right: 0}}>
                      <XAxis tickLabelAngle={-45} style = {{fontSize: 10}}/>
                      <YAxis tickTotal={2}/>
                      <HorizontalGridLines tickTotal={2}/>
                      <VerticalBarSeries
                        data={this.indMap}
                        color= "#154360"
                      />
                    </FlexibleXYPlot>
                  </Card>
                </Col>
                <Col>
                  <Card body>
                  <p className="float-left mb-0">
                    <strong>
                    Top Malware
                    </strong>
                  </p>
                    <FlexibleXYPlot
                        xType="ordinal"
                        yDomain={[0,5]}
                        height={250}
                        margin={{top: 10, bottom: 70, left: 40, right: 0}}>
                      <XAxis tickLabelAngle={-45} style={{fontSize: 10}}/>
                      <YAxis tickTotal={2}/>
                      <HorizontalGridLines tickTotal={2}/>
                      <VerticalBarSeries
                        data={this.numbMap}
                        color= "#154360"
                      />
                    </FlexibleXYPlot>
                  </Card>
                </Col>
              </Row>
            </Container>
          </div>
        );
    }
}

//imports states from redux
const mapStateToProps = function(state){
  return {
    days: state.days
  }
}

export default connect(mapStateToProps)(Chart);
